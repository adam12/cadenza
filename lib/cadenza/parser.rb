#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser.rb : generated by racc
  
module Cadenza
  class Parser < Racc::Parser

module_eval(<<'...end cadenza.y/module_eval...', 'cadenza.y', 157)
attr_reader :lexer

def initialize(options={})
  @lexer = options.fetch(:lexer, Cadenza::Lexer.new)

  raise "Lexers passed to the parser must define next_token" unless @lexer.respond_to?(:next_token)

  raise "Lexers passed to the parser must define source=" unless @lexer.respond_to?(:source=)
end

def parse(source)
  @lexer.source = source

  @stack = [DocumentNode.new]

  do_parse

  @stack.first
end

def push_child(node)
  @stack.last.children.push(node)
end

def push_block(block_node)
  @stack.first.add_block(block_node)
  push_child(block_node)
end

def next_token
  @lexer.next_token
end
...end cadenza.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    31,     3,     3,     4,     4,    31,   109,    38,    20,    21,
    22,    23,    64,    31,    31,     7,     7,    60,    56,    84,
    59,    96,    28,   103,    88,    89,    29,    28,    31,    30,
    58,    29,    32,   121,    30,    28,    28,    32,   120,    29,
    29,    31,    30,    30,   115,    32,    32,     3,    98,   117,
    28,     3,    31,   118,    29,    95,    96,    30,    97,   112,
    32,     7,     3,    28,   111,     7,     3,    29,   108,    78,
    30,    62,    78,    32,    28,     3,     7,     4,    29,   106,
     7,    30,    55,     3,    32,     4,     3,    62,     4,     7,
     3,     3,     4,    61,     3,   101,    91,     7,    64,     3,
     7,     4,    44,    45,     7,     7,    90,     3,     7,     4,
    44,    45,    87,     7,    46,    47,    48,    49,    50,    51,
    86,     7,    38,    20,    21,    22,    23,    81,    46,    47,
    48,    49,    50,    51,    67,    83,    53,    82,    52,    46,
    47,    48,    49,    50,    51,    46,    47,    48,    49,    50,
    51,    46,    47,    48,    49,    50,    51,    38,    20,    21,
    22,    23,    38,    20,    21,    22,    23,    38,    20,    21,
    22,    23,    38,    20,    21,    22,    23,    38,    20,    21,
    22,    23,    19,    20,    21,    22,    23,    38,    20,    21,
    22,    23,    38,    20,    21,    22,    23,    38,    20,    21,
    22,    23,    38,    20,    21,    22,    23,    38,    20,    21,
    22,    23,    38,    20,    21,    22,    23,    38,    20,    21,
    22,    23,    64,   116,    66,    37,    65,    38,    20,    21,
    22,    23,    38,    20,    21,    22,    23,    44,    45,    44,
    45,    44,    45,    44,    45,    42,    43,    42,    43,    42,
    43,    44,    45,    34,   119,    78,    15,   122,   123 ]

racc_action_check = [
    61,   109,   110,   109,   110,   118,   102,    31,    31,    31,
    31,    31,    57,   111,   117,   109,   110,    32,    30,    57,
    32,    94,    61,    94,    61,    61,    61,   118,   108,    61,
    31,   118,    61,   118,   118,   111,   117,   118,   117,   111,
   117,    91,   111,   117,   111,   111,   117,   113,    82,   113,
   108,   114,     4,   114,   108,    78,    80,   108,    80,   108,
   108,   113,   107,    91,   107,   114,   100,    91,   100,    66,
    91,    91,    96,    91,     4,    99,   107,    99,     4,    98,
   100,     4,    29,     5,     4,     5,     2,    34,     2,    99,
    85,    33,    85,    33,    63,    88,    63,     5,   104,     0,
     2,     0,    76,    76,    85,    33,    62,    36,    63,    36,
    73,    73,    60,     0,    54,    54,    54,    54,    54,    54,
    59,    36,    51,    51,    51,    51,    51,    54,    27,    27,
    27,    27,    27,    27,    41,    56,    27,    55,    27,    41,
    41,    41,    41,    41,    41,    39,    39,    39,    39,    39,
    39,    93,    93,    93,    93,    93,    93,    47,    47,    47,
    47,    47,    48,    48,    48,    48,    48,    49,    49,    49,
    49,    49,    50,    50,    50,    50,    50,    46,    46,    46,
    46,    46,     3,     3,     3,     3,     3,    45,    45,    45,
    45,    45,    19,    19,    19,    19,    19,    23,    23,    23,
    23,    23,    44,    44,    44,    44,    44,    43,    43,    43,
    43,    43,    95,    95,    95,    95,    95,    42,    42,    42,
    42,    42,    40,   112,    40,    15,    40,    28,    28,    28,
    28,    28,    64,    64,    64,    64,    64,    74,    74,    75,
    75,    72,    72,    77,    77,    70,    70,    71,    71,    25,
    25,    26,    26,     6,   115,    53,     1,   120,   121 ]

racc_action_pointer = [
    78,   256,    65,   180,    50,    62,   230,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   225,   nil,   nil,   nil,   190,
   nil,   nil,   nil,   195,   nil,   241,   241,   116,   225,    80,
    16,     5,    15,    70,    55,   nil,    86,   nil,   nil,   133,
   204,   127,   215,   205,   200,   185,   175,   155,   160,   165,
   170,   120,   nil,   253,   102,   108,   110,    -6,   nil,    95,
    87,    -2,    81,    73,   230,   nil,    67,   nil,   nil,   nil,
   237,   239,   231,   100,   227,   229,    92,   233,    36,   nil,
    36,   nil,    46,   nil,   nil,    69,   nil,   nil,    70,   nil,
   nil,    39,   nil,   139,     1,   210,    70,   nil,    54,    54,
    45,   nil,   -19,   nil,    80,   nil,   nil,    41,    26,   -20,
   -19,    11,   198,    26,    30,   229,   nil,    12,     3,   nil,
   232,   233,   nil,   nil ]

racc_action_default = [
    -2,   -59,    -1,   -59,   -59,   -59,   -40,   -48,   -49,   -50,
   -51,   -52,   -53,   -55,   -57,   -59,   -54,   -56,   -58,    -3,
    -4,    -5,    -6,   -59,    -8,   -11,   -14,   -59,   -59,   -59,
   -59,   -59,   -59,   -59,   -59,   -39,   -59,   124,    -3,   -21,
   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
   -59,   -59,   -27,   -59,   -59,   -59,   -59,   -59,   -42,   -59,
   -59,   -59,   -59,   -59,   -59,   -29,   -59,    -7,    -9,   -10,
   -12,   -13,   -15,   -16,   -17,   -18,   -19,   -20,   -23,   -25,
   -59,   -31,   -59,   -37,   -44,   -59,   -46,   -47,   -59,   -33,
   -38,   -59,   -41,   -22,   -59,   -59,   -59,   -28,   -59,   -59,
   -59,   -32,   -59,   -30,   -24,   -26,   -35,   -59,   -59,   -59,
   -59,   -59,   -59,   -59,   -59,   -59,   -43,   -59,   -59,   -45,
   -59,   -59,   -34,   -36 ]

racc_goto_table = [
    16,    40,    17,    27,    18,    35,    80,    68,    69,     2,
    70,    71,   102,    57,    33,   110,    36,    85,    99,    94,
   105,     1,   nil,    41,   nil,   nil,   nil,   nil,    54,   nil,
   nil,    16,   nil,    17,   nil,    18,    72,    73,    74,    75,
    76,    77,   nil,   nil,   nil,    63,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,    92,    17,    93,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   104,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   100,   nil,   nil,   nil,    16,   nil,
    17,   nil,    18,   nil,   nil,    16,   nil,    17,   107,    18,
   nil,    16,    16,    17,    17,    18,    18,   nil,   113,   114 ]

racc_goto_check = [
    24,     7,    23,     4,    18,    17,     9,     3,     3,     2,
     5,     5,    13,     7,     2,    15,    19,    21,    22,     9,
     8,     1,   nil,     4,   nil,   nil,   nil,   nil,     4,   nil,
   nil,    24,   nil,    23,   nil,    18,     6,     6,     6,     6,
     6,     6,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,    17,    23,     4,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,    24,   nil,
    23,   nil,    18,   nil,   nil,    24,   nil,    23,     2,    18,
   nil,    24,    24,    23,    23,    18,    18,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    21,     9,   -35,     0,   -34,   -10,   -18,   -76,   -47,
   nil,   nil,   nil,   -77,   nil,   -91,   nil,    -1,     2,    10,
   nil,   -41,   -66,     0,    -2 ]

racc_goto_default = [
   nil,   nil,   nil,    24,    39,    25,    26,   nil,    79,   nil,
     8,     5,     9,   nil,    10,   nil,     6,   nil,    14,   nil,
    11,   nil,   nil,    13,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 37, :_reduce_none,
  0, 37, :_reduce_2,
  1, 39, :_reduce_3,
  1, 39, :_reduce_4,
  1, 39, :_reduce_5,
  1, 39, :_reduce_6,
  3, 39, :_reduce_7,
  1, 41, :_reduce_none,
  3, 41, :_reduce_9,
  3, 41, :_reduce_10,
  1, 42, :_reduce_none,
  3, 42, :_reduce_12,
  3, 42, :_reduce_13,
  1, 40, :_reduce_none,
  3, 40, :_reduce_15,
  3, 40, :_reduce_16,
  3, 40, :_reduce_17,
  3, 40, :_reduce_18,
  3, 40, :_reduce_19,
  3, 40, :_reduce_20,
  1, 43, :_reduce_21,
  3, 43, :_reduce_22,
  1, 44, :_reduce_23,
  3, 44, :_reduce_24,
  1, 45, :_reduce_25,
  3, 45, :_reduce_26,
  3, 46, :_reduce_27,
  5, 46, :_reduce_28,
  4, 46, :_reduce_29,
  6, 46, :_reduce_30,
  4, 47, :_reduce_31,
  5, 48, :_reduce_32,
  0, 49, :_reduce_33,
  10, 48, :_reduce_34,
  0, 51, :_reduce_35,
  11, 50, :_reduce_36,
  4, 52, :_reduce_37,
  3, 53, :_reduce_none,
  2, 54, :_reduce_39,
  0, 55, :_reduce_40,
  4, 54, :_reduce_41,
  0, 57, :_reduce_42,
  8, 56, :_reduce_43,
  0, 58, :_reduce_44,
  9, 56, :_reduce_45,
  4, 59, :_reduce_46,
  4, 59, :_reduce_47,
  1, 60, :_reduce_48,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 38, :_reduce_53,
  2, 38, :_reduce_54,
  1, 38, :_reduce_55,
  2, 38, :_reduce_56,
  1, 38, :_reduce_57,
  2, 38, :_reduce_58 ]

racc_reduce_n = 59

racc_shift_n = 124

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :INTEGER => 3,
  :REAL => 4,
  :STRING => 5,
  "(" => 6,
  ")" => 7,
  "*" => 8,
  "/" => 9,
  "+" => 10,
  "-" => 11,
  :OP_EQ => 12,
  :OP_NEQ => 13,
  :OP_LEQ => 14,
  :OP_GEQ => 15,
  ">" => 16,
  "<" => 17,
  "," => 18,
  ":" => 19,
  "|" => 20,
  :VAR_OPEN => 21,
  :VAR_CLOSE => 22,
  :STMT_OPEN => 23,
  :IF => 24,
  :STMT_CLOSE => 25,
  :ENDIF => 26,
  :ELSE => 27,
  :FOR => 28,
  :IN => 29,
  :ENDFOR => 30,
  :BLOCK => 31,
  :ENDBLOCK => 32,
  :END => 33,
  :EXTENDS => 34,
  :TEXT_BLOCK => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "INTEGER",
  "REAL",
  "STRING",
  "\"(\"",
  "\")\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "OP_EQ",
  "OP_NEQ",
  "OP_LEQ",
  "OP_GEQ",
  "\">\"",
  "\"<\"",
  "\",\"",
  "\":\"",
  "\"|\"",
  "VAR_OPEN",
  "VAR_CLOSE",
  "STMT_OPEN",
  "IF",
  "STMT_CLOSE",
  "ENDIF",
  "ELSE",
  "FOR",
  "IN",
  "ENDFOR",
  "BLOCK",
  "ENDBLOCK",
  "END",
  "EXTENDS",
  "TEXT_BLOCK",
  "$start",
  "target",
  "document",
  "primary_expression",
  "boolean_expression",
  "multiplicative_expression",
  "additive_expression",
  "parameter_list",
  "filter",
  "filter_list",
  "inject_statement",
  "if_statement",
  "if_block",
  "@1",
  "for_block",
  "@2",
  "block_tag",
  "end_block_tag",
  "block_block",
  "@3",
  "generic_block",
  "@4",
  "@5",
  "extends_statement",
  "document_component" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'cadenza.y', 7)
  def _reduce_2(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 11)
  def _reduce_3(val, _values, result)
     result = VariableNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 12)
  def _reduce_4(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 13)
  def _reduce_5(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 14)
  def _reduce_6(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 15)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'cadenza.y', 20)
  def _reduce_9(val, _values, result)
     result = ArithmeticNode.new(val[0], "*", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 21)
  def _reduce_10(val, _values, result)
     result = ArithmeticNode.new(val[0], "/", val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'cadenza.y', 26)
  def _reduce_12(val, _values, result)
     result = ArithmeticNode.new(val[0], "+", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 27)
  def _reduce_13(val, _values, result)
     result = ArithmeticNode.new(val[0], "-", val[2]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'cadenza.y', 32)
  def _reduce_15(val, _values, result)
     result = BooleanNode.new(val[0], "==", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 33)
  def _reduce_16(val, _values, result)
     result = BooleanNode.new(val[0], "!=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 34)
  def _reduce_17(val, _values, result)
     result = BooleanNode.new(val[0], "<=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 35)
  def _reduce_18(val, _values, result)
     result = BooleanNode.new(val[0], ">=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 36)
  def _reduce_19(val, _values, result)
     result = BooleanNode.new(val[0], ">", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 37)
  def _reduce_20(val, _values, result)
     result = BooleanNode.new(val[0], "<", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 41)
  def _reduce_21(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 42)
  def _reduce_22(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 46)
  def _reduce_23(val, _values, result)
     result = FilterNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 47)
  def _reduce_24(val, _values, result)
     result = FilterNode.new(val[0].value, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 51)
  def _reduce_25(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 52)
  def _reduce_26(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 57)
  def _reduce_27(val, _values, result)
     result = InjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 59)
  def _reduce_28(val, _values, result)
     result = InjectNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 62)
  def _reduce_29(val, _values, result)
            variable = VariableNode.new(val[1].value)
        result = InjectNode.new(variable, [], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 67)
  def _reduce_30(val, _values, result)
            variable = VariableNode.new(val[1].value)
        result = InjectNode.new(variable, val[4], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 75)
  def _reduce_31(val, _values, result)
            @stack.push DocumentNode.new
        result = val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 83)
  def _reduce_32(val, _values, result)
            result = IfNode.new(val[0], @stack.pop.children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 86)
  def _reduce_33(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 89)
  def _reduce_34(val, _values, result)
            false_children, true_children = @stack.pop.children, @stack.pop.children
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 96)
  def _reduce_35(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 100)
  def _reduce_36(val, _values, result)
            iterator = VariableNode.new(val[2].value)
        iterable = VariableNode.new(val[4].value)
        
        result = ForNode.new(iterator, iterable, @stack.pop.children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 108)
  def _reduce_37(val, _values, result)
     result = val[2].value 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'cadenza.y', 117)
  def _reduce_39(val, _values, result)
     result = BlockNode.new(val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 118)
  def _reduce_40(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 118)
  def _reduce_41(val, _values, result)
     result = BlockNode.new(val[0], @stack.pop.children) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 122)
  def _reduce_42(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 124)
  def _reduce_43(val, _values, result)
     result = GenericBlockNode.new(val[1].value, @stack.pop.children) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 125)
  def _reduce_44(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 127)
  def _reduce_45(val, _values, result)
     result = GenericBlockNode.new(val[1].value, @stack.pop.children, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 131)
  def _reduce_46(val, _values, result)
     result = val[2].value 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 132)
  def _reduce_47(val, _values, result)
     result = VariableNode.new(val[2].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 136)
  def _reduce_48(val, _values, result)
     result = TextNode.new(val[0].value) 
    result
  end
.,.,

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'cadenza.y', 144)
  def _reduce_53(val, _values, result)
     push_child val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 145)
  def _reduce_54(val, _values, result)
     push_child val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 146)
  def _reduce_55(val, _values, result)
     @stack.first.extends = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 147)
  def _reduce_56(val, _values, result)
     @stack.first.extends = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 148)
  def _reduce_57(val, _values, result)
     push_block(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 149)
  def _reduce_58(val, _values, result)
     push_block(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Cadenza
