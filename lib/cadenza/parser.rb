#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser.rb : generated by racc
  
module Cadenza
  class Parser < Racc::Parser

module_eval(<<'...end cadenza.y/module_eval...', 'cadenza.y', 149)
attr_reader :lexer, :container_name

def initialize(options={})
  @lexer = options.fetch(:lexer, Cadenza::Lexer.new)

  raise "Lexers passed to the parser must define next_token" unless @lexer.respond_to?(:next_token)

  raise "Lexers passed to the parser must define source=" unless @lexer.respond_to?(:source=)
end

def parse(source)
  @lexer.source = source

  @stack = [DocumentNode.new]

  do_parse

  @stack.first
end

def push_child(node)
  @stack.last.children.push(node)
end

def push_block(block_node)
  @stack.first.add_block(block_node)
  push_child(block_node)
end

def next_token
  @lexer.next_token
end
...end cadenza.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    30,     3,     3,     4,   113,    30,     3,     3,     4,     4,
    58,    40,    41,    30,    30,     6,     6,    78,    38,    39,
     6,     6,    27,   102,    82,    83,    28,    27,    30,    29,
    30,    28,    31,   117,    29,    27,    27,    31,   116,    28,
    28,    30,    29,    29,   110,    31,    31,    87,    72,    95,
    27,     3,    27,   112,    28,    72,    28,    29,   109,    29,
    31,   106,    31,    27,    81,     6,     3,    28,     4,     3,
    29,   105,    98,    31,    34,    19,    20,    21,    22,     3,
     6,     4,     3,     6,     4,     3,     3,    57,   101,     3,
     3,     4,     4,     6,    58,    56,     6,    54,    55,     6,
     6,    40,    41,     6,     6,     3,    93,   104,    42,    43,
    44,    45,    46,    47,    34,    19,    20,    21,    22,     6,
    52,    75,    42,    43,    44,    45,    46,    47,    61,    87,
    49,    88,    48,    42,    43,    44,    45,    46,    47,    42,
    43,    44,    45,    46,    47,    42,    43,    44,    45,    46,
    47,    34,    19,    20,    21,    22,    34,    19,    20,    21,
    22,    18,    19,    20,    21,    22,    34,    19,    20,    21,
    22,    34,    19,    20,    21,    22,    34,    19,    20,    21,
    22,    34,    19,    20,    21,    22,    34,    19,    20,    21,
    22,    34,    19,    20,    21,    22,    34,    19,    20,    21,
    22,    34,    19,    20,    21,    22,    58,    51,    60,    80,
    59,    34,    19,    20,    21,    22,    34,    19,    20,    21,
    22,    34,    19,    20,    21,    22,    34,    19,    20,    21,
    22,    40,    41,    40,    41,    40,    41,    40,    41,    40,
    41,    38,    39,    38,    39,    89,    86,    77,   111,    76,
    33,   114,   115,    72,    14,   118,   119 ]

racc_action_check = [
    57,   102,   108,   102,   108,   113,   103,     0,   103,     0,
    53,    25,    25,   105,   112,   102,   108,    53,    24,    24,
   103,     0,    57,    94,    57,    57,    57,   113,   104,    57,
   101,   113,    57,   113,   113,   105,   112,   113,   112,   105,
   112,     4,   105,   112,   105,   105,   112,    85,    87,    85,
   104,   107,   101,   107,   104,    60,   101,   104,   104,   101,
   104,   101,   101,     4,    56,   107,     5,     4,     5,   100,
     4,   100,    89,     4,    30,    30,    30,    30,    30,     2,
     5,     2,    90,   100,    90,    32,    92,    32,    92,    91,
    79,    91,    79,     2,    96,    31,    90,    30,    31,    32,
    92,    68,    68,    91,    79,    99,    82,    99,    50,    50,
    50,    50,    50,    50,    22,    22,    22,    22,    22,    99,
    29,    50,    26,    26,    26,    26,    26,    26,    37,    74,
    26,    74,    26,    37,    37,    37,    37,    37,    37,    35,
    35,    35,    35,    35,    35,    84,    84,    84,    84,    84,
    84,    46,    46,    46,    46,    46,    47,    47,    47,    47,
    47,     3,     3,     3,     3,     3,    41,    41,    41,    41,
    41,    18,    18,    18,    18,    18,    45,    45,    45,    45,
    45,    44,    44,    44,    44,    44,    27,    27,    27,    27,
    27,    43,    43,    43,    43,    43,    40,    40,    40,    40,
    40,    58,    58,    58,    58,    58,    36,    28,    36,    55,
    36,    38,    38,    38,    38,    38,    86,    86,    86,    86,
    86,    42,    42,    42,    42,    42,    39,    39,    39,    39,
    39,    71,    71,    67,    67,    70,    70,    66,    66,    69,
    69,    65,    65,    64,    64,    76,    72,    52,   106,    51,
    14,   109,   110,    49,     1,   116,   117 ]

racc_action_pointer = [
   -14,   254,    58,   159,    39,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   250,   nil,   nil,   nil,   169,   nil,
   nil,   nil,   112,   nil,    10,     1,   110,   184,   205,   118,
    72,    93,    64,   nil,   nil,   127,   188,   121,   209,   224,
   194,   164,   219,   189,   179,   174,   149,   154,   nil,   251,
    96,   220,   222,    -8,   nil,   184,    39,    -2,   199,   nil,
    53,   nil,   nil,   nil,   235,   233,   227,   223,    91,   229,
   225,   221,   227,   nil,   109,   nil,   243,   nil,   nil,    69,
   nil,   nil,    81,   nil,   133,    27,   214,    46,   nil,    47,
    61,    68,    65,   nil,    -2,   nil,    76,   nil,   nil,    84,
    48,    28,   -20,   -15,    26,    11,   223,    30,   -19,   226,
   227,   nil,    12,     3,   nil,   nil,   230,   231,   nil,   nil ]

racc_action_default = [
    -2,   -56,    -1,   -56,   -56,   -56,   -45,   -46,   -47,   -48,
   -49,   -50,   -52,   -54,   -56,   -51,   -53,   -55,    -3,    -4,
    -5,    -6,   -56,    -8,   -11,   -14,   -56,   -56,   -56,   -56,
   -56,   -56,   -56,   120,    -3,   -21,   -56,   -56,   -56,   -56,
   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -27,   -56,
   -56,   -56,   -56,   -56,   -39,   -56,   -56,   -56,   -56,   -29,
   -56,    -7,    -9,   -10,   -12,   -13,   -15,   -16,   -17,   -18,
   -19,   -20,   -23,   -25,   -56,   -31,   -56,   -37,   -41,   -56,
   -43,   -44,   -56,   -33,   -22,   -56,   -56,   -56,   -28,   -56,
   -56,   -56,   -56,   -32,   -56,   -30,   -24,   -26,   -35,   -56,
   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,
   -56,   -40,   -56,   -56,   -38,   -42,   -56,   -56,   -34,   -36 ]

racc_goto_table = [
    15,    36,    17,    26,    16,    74,    66,    67,    68,    69,
    70,    71,    90,    53,    62,    63,    85,    64,    65,    94,
   103,    79,    37,    91,     2,    97,     1,    50,   nil,    32,
    15,   nil,    17,   nil,    16,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    96,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,    17,   nil,    16,   nil,   nil,    15,    15,    17,
    17,    16,    16,    92,   nil,    15,    15,    17,    17,    16,
    16,   nil,   nil,   nil,    99,   100,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   107,   108 ]

racc_goto_check = [
    22,     7,    16,     4,    21,     9,     6,     6,     6,     6,
     6,     6,    17,     7,     3,     3,     9,     5,     5,    13,
    15,    19,     4,    20,     2,     8,     1,     4,   nil,     2,
    22,   nil,    16,   nil,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,    16,   nil,    21,   nil,   nil,    22,    22,    16,
    16,    21,    21,     2,   nil,    22,    22,    16,    16,    21,
    21,   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    26,    24,   -24,     0,   -23,   -36,   -17,   -62,   -44,
   nil,   nil,   nil,   -64,   nil,   -78,     0,   -65,   nil,   -33,
   -55,     2,    -2 ]

racc_goto_default = [
   nil,   nil,   nil,    23,    35,    24,    25,   nil,    73,   nil,
     7,     5,     8,   nil,     9,   nil,    13,   nil,    10,   nil,
   nil,    12,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 37, :_reduce_none,
  0, 37, :_reduce_2,
  1, 39, :_reduce_3,
  1, 39, :_reduce_4,
  1, 39, :_reduce_5,
  1, 39, :_reduce_6,
  3, 39, :_reduce_7,
  1, 41, :_reduce_none,
  3, 41, :_reduce_9,
  3, 41, :_reduce_10,
  1, 42, :_reduce_none,
  3, 42, :_reduce_12,
  3, 42, :_reduce_13,
  1, 40, :_reduce_none,
  3, 40, :_reduce_15,
  3, 40, :_reduce_16,
  3, 40, :_reduce_17,
  3, 40, :_reduce_18,
  3, 40, :_reduce_19,
  3, 40, :_reduce_20,
  1, 43, :_reduce_21,
  3, 43, :_reduce_22,
  1, 44, :_reduce_23,
  3, 44, :_reduce_24,
  1, 45, :_reduce_25,
  3, 45, :_reduce_26,
  3, 46, :_reduce_27,
  5, 46, :_reduce_28,
  4, 46, :_reduce_29,
  6, 46, :_reduce_30,
  4, 47, :_reduce_31,
  5, 48, :_reduce_32,
  0, 49, :_reduce_33,
  10, 48, :_reduce_34,
  0, 51, :_reduce_35,
  11, 50, :_reduce_36,
  0, 53, :_reduce_37,
  9, 52, :_reduce_38,
  0, 55, :_reduce_39,
  8, 54, :_reduce_40,
  0, 56, :_reduce_41,
  9, 54, :_reduce_42,
  4, 57, :_reduce_43,
  4, 57, :_reduce_44,
  1, 58, :_reduce_45,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  1, 38, :_reduce_50,
  2, 38, :_reduce_51,
  1, 38, :_reduce_52,
  2, 38, :_reduce_53,
  1, 38, :_reduce_54,
  2, 38, :_reduce_55 ]

racc_reduce_n = 56

racc_shift_n = 120

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :INTEGER => 3,
  :REAL => 4,
  :STRING => 5,
  "(" => 6,
  ")" => 7,
  "*" => 8,
  "/" => 9,
  "+" => 10,
  "-" => 11,
  :OP_EQ => 12,
  :OP_NEQ => 13,
  :OP_LEQ => 14,
  :OP_GEQ => 15,
  ">" => 16,
  "<" => 17,
  "," => 18,
  ":" => 19,
  "|" => 20,
  :VAR_OPEN => 21,
  :VAR_CLOSE => 22,
  :STMT_OPEN => 23,
  :IF => 24,
  :STMT_CLOSE => 25,
  :ENDIF => 26,
  :ELSE => 27,
  :FOR => 28,
  :IN => 29,
  :ENDFOR => 30,
  :BLOCK => 31,
  :ENDBLOCK => 32,
  :END => 33,
  :EXTENDS => 34,
  :TEXT_BLOCK => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "INTEGER",
  "REAL",
  "STRING",
  "\"(\"",
  "\")\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "OP_EQ",
  "OP_NEQ",
  "OP_LEQ",
  "OP_GEQ",
  "\">\"",
  "\"<\"",
  "\",\"",
  "\":\"",
  "\"|\"",
  "VAR_OPEN",
  "VAR_CLOSE",
  "STMT_OPEN",
  "IF",
  "STMT_CLOSE",
  "ENDIF",
  "ELSE",
  "FOR",
  "IN",
  "ENDFOR",
  "BLOCK",
  "ENDBLOCK",
  "END",
  "EXTENDS",
  "TEXT_BLOCK",
  "$start",
  "target",
  "document",
  "primary_expression",
  "boolean_expression",
  "multiplicative_expression",
  "additive_expression",
  "parameter_list",
  "filter",
  "filter_list",
  "inject_statement",
  "if_statement",
  "if_block",
  "@1",
  "for_block",
  "@2",
  "block_block",
  "@3",
  "generic_block",
  "@4",
  "@5",
  "extends_statement",
  "document_component" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'cadenza.y', 5)
  def _reduce_2(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 9)
  def _reduce_3(val, _values, result)
     result = VariableNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 10)
  def _reduce_4(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 11)
  def _reduce_5(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 12)
  def _reduce_6(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 13)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'cadenza.y', 18)
  def _reduce_9(val, _values, result)
     result = ArithmeticNode.new(val[0], "*", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 19)
  def _reduce_10(val, _values, result)
     result = ArithmeticNode.new(val[0], "/", val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'cadenza.y', 24)
  def _reduce_12(val, _values, result)
     result = ArithmeticNode.new(val[0], "+", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 25)
  def _reduce_13(val, _values, result)
     result = ArithmeticNode.new(val[0], "-", val[2]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'cadenza.y', 30)
  def _reduce_15(val, _values, result)
     result = BooleanNode.new(val[0], "==", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 31)
  def _reduce_16(val, _values, result)
     result = BooleanNode.new(val[0], "!=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 32)
  def _reduce_17(val, _values, result)
     result = BooleanNode.new(val[0], "<=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 33)
  def _reduce_18(val, _values, result)
     result = BooleanNode.new(val[0], ">=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 34)
  def _reduce_19(val, _values, result)
     result = BooleanNode.new(val[0], ">", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 35)
  def _reduce_20(val, _values, result)
     result = BooleanNode.new(val[0], "<", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 39)
  def _reduce_21(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 40)
  def _reduce_22(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 44)
  def _reduce_23(val, _values, result)
     result = FilterNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 45)
  def _reduce_24(val, _values, result)
     result = FilterNode.new(val[0].value, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 49)
  def _reduce_25(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 50)
  def _reduce_26(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 55)
  def _reduce_27(val, _values, result)
     result = InjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 57)
  def _reduce_28(val, _values, result)
     result = InjectNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 60)
  def _reduce_29(val, _values, result)
            variable = VariableNode.new(val[1].value)
        result = InjectNode.new(variable, [], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 65)
  def _reduce_30(val, _values, result)
            variable = VariableNode.new(val[1].value)
        result = InjectNode.new(variable, val[4], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 73)
  def _reduce_31(val, _values, result)
            @stack.push DocumentNode.new
        result = val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 81)
  def _reduce_32(val, _values, result)
            result = IfNode.new(val[0], @stack.pop.children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 84)
  def _reduce_33(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 87)
  def _reduce_34(val, _values, result)
            false_children, true_children = @stack.pop.children, @stack.pop.children
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 94)
  def _reduce_35(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 98)
  def _reduce_36(val, _values, result)
            iterator = VariableNode.new(val[2].value)
        iterable = VariableNode.new(val[4].value)
        
        result = ForNode.new(iterator, iterable, @stack.pop.children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 107)
  def _reduce_37(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 110)
  def _reduce_38(val, _values, result)
     result = BlockNode.new(val[2].value, @stack.pop.children) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 114)
  def _reduce_39(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 116)
  def _reduce_40(val, _values, result)
     result = GenericBlockNode.new(val[1].value, @stack.pop.children) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 117)
  def _reduce_41(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 119)
  def _reduce_42(val, _values, result)
     result = GenericBlockNode.new(val[1].value, @stack.pop.children, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 123)
  def _reduce_43(val, _values, result)
     result = val[2].value 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 124)
  def _reduce_44(val, _values, result)
     result = VariableNode.new(val[2].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 128)
  def _reduce_45(val, _values, result)
     result = TextNode.new(val[0].value) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'cadenza.y', 136)
  def _reduce_50(val, _values, result)
     push_child val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 137)
  def _reduce_51(val, _values, result)
     push_child val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 138)
  def _reduce_52(val, _values, result)
     @stack.first.extends = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 139)
  def _reduce_53(val, _values, result)
     @stack.first.extends = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 140)
  def _reduce_54(val, _values, result)
     push_block(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 141)
  def _reduce_55(val, _values, result)
     push_block(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Cadenza
