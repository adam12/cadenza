#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

# racc_parser.rb : generated by racc

module Cadenza
  class RaccParser < Racc::Parser

module_eval(<<'...end cadenza.y/module_eval...', 'cadenza.y', 222)

...end cadenza.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    38,    94,    69,    70,     3,    38,     4,     3,   133,   146,
   111,    69,    70,    38,    69,    70,    94,    71,    38,   112,
     9,   130,    80,     9,    34,    79,    35,   115,    82,    34,
    36,    35,    38,    37,    95,    36,    39,    34,    37,    35,
   149,    39,    34,    36,    35,    90,    37,    38,    36,    39,
   125,    37,    92,     3,    39,     4,    34,   135,    35,     3,
    38,   126,    36,    60,    61,    37,    60,    61,    39,     9,
   136,    34,    90,    35,    38,     9,    86,    36,   120,     3,
    37,   147,    76,    39,    34,    75,    35,    81,    82,    38,
    36,    72,     3,    37,   121,     9,    39,   119,    34,   118,
    35,     3,   117,    51,    36,    60,    61,    37,     9,   148,
    39,    58,    59,    34,   114,    35,    81,     9,    86,    36,
    69,    70,    37,    60,    61,    39,    21,    22,    23,    24,
    25,    21,    22,    23,    24,    25,    21,    22,    23,    24,
    25,   108,    30,    60,    61,    60,    61,    30,    69,    70,
   144,    78,    30,    21,    22,    23,    24,    25,    21,    22,
    23,    24,    25,    21,    22,    23,    24,    25,     3,    30,
     4,     3,   113,    44,    30,     3,     3,    40,     4,    30,
     3,     3,    40,    44,     9,   108,     3,     9,     4,    58,
    59,     9,     9,     3,    94,     4,     9,     9,    54,     3,
    48,    51,     9,    21,    22,    23,    24,    25,    18,     9,
    21,    22,    23,    24,    25,     9,     3,   150,   131,    30,
    21,    22,    23,    24,    25,     3,    30,   126,     3,     3,
   126,   121,     9,     3,   151,   121,    30,     3,   nil,     4,
   nil,     9,    60,    61,     9,     9,    58,    59,   nil,     9,
   nil,   nil,   nil,     9,    21,    22,    23,    24,    25,    21,
    22,    23,    24,    25,    62,    63,    64,    65,    66,    67,
    30,   nil,   nil,   nil,   nil,    30,    62,    63,    64,    65,
    66,    67,    21,    22,    23,    24,    25,    21,    22,    23,
    24,    25,    21,    22,    23,    24,    25,    21,    22,    23,
    24,    25,    21,    22,    23,    24,    25,    21,    22,    23,
    24,    25,    21,    22,    23,    24,    25,    21,    22,    23,
    24,    25,    21,    22,    23,    24,    25,    21,    22,    23,
    24,    25,    21,    22,    23,    24,    25 ]

racc_action_check = [
   121,    77,    73,    73,     0,   147,     0,   139,    92,   139,
    73,    74,    74,   131,    32,    32,    56,    32,    51,    74,
     0,    90,    39,   139,   121,    39,   121,    77,   121,   147,
   121,   147,     4,   121,    57,   147,   121,   131,   147,   131,
   147,   147,    51,   131,    51,   131,   131,   126,    51,   131,
    86,    51,    51,   138,    51,   138,     4,   108,     4,   128,
    40,   128,     4,   104,   104,     4,    28,    28,     4,   138,
   110,   126,    48,   126,   146,   128,   126,   126,    82,   145,
   126,   145,    37,   126,    40,    36,    40,    40,    40,    44,
    40,    33,   123,    40,   123,   145,    40,    81,   146,    80,
   146,     8,    79,     8,   146,   105,   105,   146,   123,   146,
   146,    27,    27,    44,    76,    44,    44,     8,    44,    44,
   134,   134,    44,   103,   103,    44,    38,    38,    38,    38,
    38,   135,   135,   135,   135,   135,    21,    21,    21,    21,
    21,   136,    38,   102,   102,   101,   101,   135,    55,    55,
   137,    38,    21,    34,    34,    34,    34,    34,    35,    35,
    35,    35,    35,    25,    25,    25,    25,    25,   116,    34,
   116,     6,    75,     6,    35,    42,    43,    42,    43,    25,
     5,    46,     5,    46,   116,    71,    47,     6,    47,    98,
    98,    42,    43,    50,   142,    50,     5,    46,    18,    53,
     7,    53,    47,   113,   113,   113,   113,   113,     1,    50,
     3,     3,     3,     3,     3,    53,    91,   148,    91,   113,
    94,    94,    94,    94,    94,    89,     3,    89,    88,    85,
    88,    85,    91,    84,   149,    84,    94,     2,   nil,     2,
   nil,    89,   100,   100,    88,    85,    99,    99,   nil,    84,
   nil,   nil,   nil,     2,    69,    69,    69,    69,    69,    70,
    70,    70,    70,    70,    29,    29,    29,    29,    29,    29,
    69,   nil,   nil,   nil,   nil,    70,    68,    68,    68,    68,
    68,    68,    58,    58,    58,    58,    58,    63,    63,    63,
    63,    63,    62,    62,    62,    62,    62,    64,    64,    64,
    64,    64,    67,    67,    67,    67,    67,    66,    66,    66,
    66,    66,    59,    59,    59,    59,    59,    65,    65,    65,
    65,    65,    61,    61,    61,    61,    61,    60,    60,    60,
    60,    60,    30,    30,    30,    30,    30 ]

racc_action_pointer = [
   -20,   208,   213,   207,    29,   156,   147,   174,    77,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   198,   nil,
   nil,   133,   nil,   nil,   nil,   160,   nil,   102,    55,   251,
   329,   nil,    -6,    66,   150,   155,    82,    79,   123,    19,
    57,   nil,   151,   152,    86,   nil,   157,   162,    37,   nil,
   169,    15,   nil,   175,   nil,   128,    14,    26,   279,   309,
   324,   319,   289,   284,   294,   314,   304,   299,   263,   251,
   256,   182,   nil,   -18,    -9,   138,    86,    -1,   nil,    74,
    71,    69,    50,   nil,   209,   205,    22,   nil,   204,   201,
    -7,   192,   -20,   nil,   217,   nil,   nil,   nil,   180,   237,
   231,   134,   132,   112,    52,    94,   nil,   nil,    35,   nil,
    47,   nil,   nil,   200,   nil,   nil,   144,   nil,   nil,   nil,
   nil,    -3,   nil,    68,   nil,   nil,    44,   nil,    35,   nil,
   nil,    10,   nil,   nil,   100,   128,   138,   122,    29,   -17,
   nil,   nil,   192,   nil,   nil,    55,    71,     2,   189,   206,
   nil,   nil ]

racc_action_default = [
    -2,   -77,    -1,   -77,   -77,   -77,   -77,   -54,   -77,   -66,
   -67,   -68,   -69,   -70,   -71,   -72,   -73,   -75,   -77,   -74,
   -76,    -5,    -7,    -8,    -9,   -77,   -11,   -14,   -17,   -24,
   -77,   -26,   -33,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
   -77,   -41,   -77,   -77,   -77,   -46,   -77,   -77,   -77,   -53,
   -77,   -77,   -58,   -77,   152,    -3,    -6,   -77,   -77,   -77,
   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -25,   -77,
   -77,   -77,   -35,   -77,   -77,   -77,   -77,   -77,   -60,   -77,
   -77,   -77,   -77,   -42,   -77,   -77,   -77,   -47,   -77,   -77,
   -77,   -77,   -77,   -59,   -77,   -10,   -12,   -13,   -15,   -16,
   -18,   -19,   -20,   -21,   -22,   -23,   -27,   -28,   -29,   -31,
   -34,   -36,   -37,   -77,   -56,   -62,   -77,   -64,   -65,   -38,
   -39,   -77,   -44,   -77,   -43,   -40,   -77,   -49,   -77,   -48,
   -52,   -77,   -55,   -57,    -4,   -77,   -77,   -77,   -77,   -77,
   -45,   -50,   -30,   -32,   -51,   -77,   -77,   -77,   -77,   -77,
   -61,   -63 ]

racc_goto_table = [
    19,    20,    41,    45,    55,    56,    33,     2,    49,   109,
    52,   110,    42,    46,    50,    53,   116,    73,    74,    43,
    47,    55,    77,    98,    99,    96,    97,   138,    57,   100,
   101,   102,   103,   104,   105,   106,   107,    68,     1,    83,
    19,    20,   nil,    87,    19,    20,   nil,   nil,   nil,   nil,
    85,    19,    20,   nil,    89,    93,    84,    91,   nil,   nil,
    88,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   143,   nil,   nil,   134,   nil,   nil,
   nil,   122,   124,    19,    20,   127,   129,    19,    20,    19,
    20,   123,   132,   nil,   nil,   128,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   137,   nil,    55,   142,
   140,    19,    20,   139,   nil,   141,    19,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,    20,   nil,
   nil,   nil,   nil,    19,    20,   145 ]

racc_goto_check = [
    32,    31,    17,    18,     4,     3,     6,     2,    22,    11,
    26,    12,     2,     2,    24,     2,    29,     4,     4,    16,
    16,     4,     3,     7,     7,     5,     5,    30,     6,     8,
     8,     8,     8,     8,     8,    10,    10,     9,     1,    17,
    32,    31,   nil,    18,    32,    31,   nil,   nil,   nil,   nil,
     2,    32,    31,   nil,     2,    26,    16,     2,   nil,   nil,
    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    11,   nil,   nil,     4,   nil,   nil,
   nil,    17,    17,    32,    31,    18,    18,    32,    31,    32,
    31,     2,    22,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,     4,     3,
    17,    32,    31,     2,   nil,    18,    32,    31,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,    31,   nil,
   nil,   nil,   nil,    32,    31,     2 ]

racc_goto_pointer = [
   nil,    38,     7,   -16,   -17,   -33,     3,   -37,   -33,     7,
   -34,   -62,   -60,   nil,   nil,   nil,    14,    -3,    -3,   nil,
   nil,   nil,     1,   nil,     7,   nil,     2,   nil,   nil,   -62,
   -88,    -1,    -2 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    32,    26,   nil,    27,    28,    29,
    31,   nil,   nil,    10,     5,     6,   nil,   nil,   nil,    11,
    12,     7,   nil,    13,   nil,     8,   nil,    15,    14,   nil,
   nil,    17,    16 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 42, :_reduce_none,
  0, 42, :_reduce_2,
  1, 44, :_reduce_3,
  3, 44, :_reduce_4,
  1, 46, :_reduce_5,
  2, 46, :_reduce_6,
  1, 46, :_reduce_7,
  1, 46, :_reduce_8,
  1, 46, :_reduce_9,
  3, 46, :_reduce_10,
  1, 48, :_reduce_none,
  3, 48, :_reduce_12,
  3, 48, :_reduce_13,
  1, 49, :_reduce_none,
  3, 49, :_reduce_15,
  3, 49, :_reduce_16,
  1, 50, :_reduce_none,
  3, 50, :_reduce_18,
  3, 50, :_reduce_19,
  3, 50, :_reduce_20,
  3, 50, :_reduce_21,
  3, 50, :_reduce_22,
  3, 50, :_reduce_23,
  1, 51, :_reduce_none,
  2, 51, :_reduce_25,
  1, 45, :_reduce_none,
  3, 45, :_reduce_27,
  3, 45, :_reduce_28,
  1, 52, :_reduce_29,
  3, 52, :_reduce_30,
  1, 53, :_reduce_31,
  3, 53, :_reduce_32,
  1, 47, :_reduce_none,
  3, 47, :_reduce_34,
  3, 54, :_reduce_35,
  4, 55, :_reduce_36,
  4, 56, :_reduce_37,
  3, 57, :_reduce_38,
  3, 58, :_reduce_none,
  3, 59, :_reduce_none,
  2, 60, :_reduce_41,
  3, 60, :_reduce_42,
  4, 60, :_reduce_43,
  4, 60, :_reduce_44,
  5, 60, :_reduce_45,
  2, 61, :_reduce_46,
  3, 61, :_reduce_47,
  4, 61, :_reduce_48,
  4, 61, :_reduce_49,
  5, 61, :_reduce_50,
  6, 62, :_reduce_51,
  3, 63, :_reduce_none,
  2, 64, :_reduce_53,
  0, 65, :_reduce_54,
  4, 64, :_reduce_55,
  4, 66, :_reduce_56,
  3, 67, :_reduce_57,
  2, 68, :_reduce_58,
  3, 68, :_reduce_59,
  0, 70, :_reduce_60,
  8, 69, :_reduce_61,
  0, 71, :_reduce_62,
  9, 69, :_reduce_63,
  4, 72, :_reduce_64,
  4, 72, :_reduce_65,
  1, 73, :_reduce_66,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 43, :_reduce_73,
  2, 43, :_reduce_74,
  1, 43, :_reduce_75,
  2, 43, :_reduce_76 ]

racc_reduce_n = 77

racc_shift_n = 152

racc_token_table = {
  false => 0,
  :error => 1,
  "," => 2,
  :IDENTIFIER => 3,
  :INTEGER => 4,
  :REAL => 5,
  :STRING => 6,
  "(" => 7,
  ")" => 8,
  "*" => 9,
  "/" => 10,
  "+" => 11,
  "-" => 12,
  :OP_EQ => 13,
  :OP_NEQ => 14,
  :OP_LEQ => 15,
  :OP_GEQ => 16,
  ">" => 17,
  "<" => 18,
  :NOT => 19,
  :AND => 20,
  :OR => 21,
  ":" => 22,
  "|" => 23,
  :VAR_OPEN => 24,
  :VAR_CLOSE => 25,
  :STMT_OPEN => 26,
  :IF => 27,
  :STMT_CLOSE => 28,
  :UNLESS => 29,
  :ELSE => 30,
  :ENDIF => 31,
  :ENDUNLESS => 32,
  :FOR => 33,
  :IN => 34,
  :ENDFOR => 35,
  :BLOCK => 36,
  :ENDBLOCK => 37,
  :END => 38,
  :EXTENDS => 39,
  :TEXT_BLOCK => 40 }

racc_nt_base = 41

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\",\"",
  "IDENTIFIER",
  "INTEGER",
  "REAL",
  "STRING",
  "\"(\"",
  "\")\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "OP_EQ",
  "OP_NEQ",
  "OP_LEQ",
  "OP_GEQ",
  "\">\"",
  "\"<\"",
  "NOT",
  "AND",
  "OR",
  "\":\"",
  "\"|\"",
  "VAR_OPEN",
  "VAR_CLOSE",
  "STMT_OPEN",
  "IF",
  "STMT_CLOSE",
  "UNLESS",
  "ELSE",
  "ENDIF",
  "ENDUNLESS",
  "FOR",
  "IN",
  "ENDFOR",
  "BLOCK",
  "ENDBLOCK",
  "END",
  "EXTENDS",
  "TEXT_BLOCK",
  "$start",
  "target",
  "document",
  "parameter_list",
  "logical_expression",
  "primary_expression",
  "filtered_expression",
  "multiplicative_expression",
  "additive_expression",
  "boolean_expression",
  "inverse_expression",
  "filter",
  "filter_list",
  "inject_statement",
  "if_tag",
  "unless_tag",
  "else_tag",
  "end_if_tag",
  "end_unless_tag",
  "if_block",
  "unless_block",
  "for_tag",
  "end_for_tag",
  "for_block",
  "@1",
  "block_tag",
  "end_block_tag",
  "block_block",
  "generic_block",
  "@2",
  "@3",
  "extends_statement",
  "document_component" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'cadenza.y', 8)
  def _reduce_2(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 12)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 13)
  def _reduce_4(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 18)
  def _reduce_5(val, _values, result)
     result = VariableNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 19)
  def _reduce_6(val, _values, result)
     result = VariableNode.new(val[0].value, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 20)
  def _reduce_7(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 21)
  def _reduce_8(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 22)
  def _reduce_9(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 23)
  def _reduce_10(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'cadenza.y', 28)
  def _reduce_12(val, _values, result)
     result = OperationNode.new(val[0], "*", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 29)
  def _reduce_13(val, _values, result)
     result = OperationNode.new(val[0], "/", val[2]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'cadenza.y', 34)
  def _reduce_15(val, _values, result)
     result = OperationNode.new(val[0], "+", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 35)
  def _reduce_16(val, _values, result)
     result = OperationNode.new(val[0], "-", val[2]) 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'cadenza.y', 40)
  def _reduce_18(val, _values, result)
     result = OperationNode.new(val[0], "==", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 41)
  def _reduce_19(val, _values, result)
     result = OperationNode.new(val[0], "!=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 42)
  def _reduce_20(val, _values, result)
     result = OperationNode.new(val[0], "<=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 43)
  def _reduce_21(val, _values, result)
     result = OperationNode.new(val[0], ">=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 44)
  def _reduce_22(val, _values, result)
     result = OperationNode.new(val[0], ">", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 45)
  def _reduce_23(val, _values, result)
     result = OperationNode.new(val[0], "<", val[2]) 
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'cadenza.y', 50)
  def _reduce_25(val, _values, result)
     result = BooleanInverseNode.new(val[1]) 
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'cadenza.y', 55)
  def _reduce_27(val, _values, result)
     result = OperationNode.new(val[0], "and", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 56)
  def _reduce_28(val, _values, result)
     result = OperationNode.new(val[0], "or", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 60)
  def _reduce_29(val, _values, result)
     result = FilterNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 61)
  def _reduce_30(val, _values, result)
     result = FilterNode.new(val[0].value, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 65)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 66)
  def _reduce_32(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'cadenza.y', 71)
  def _reduce_34(val, _values, result)
     result = FilteredValueNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 75)
  def _reduce_35(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 81)
  def _reduce_36(val, _values, result)
            open_scope!
        result = val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 89)
  def _reduce_37(val, _values, result)
            open_scope!
        result = BooleanInverseNode.new(val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 95)
  def _reduce_38(val, _values, result)
     open_scope! 
    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

module_eval(<<'.,.,', 'cadenza.y', 107)
  def _reduce_41(val, _values, result)
     close_scope!; result = IfNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 108)
  def _reduce_42(val, _values, result)
     result = IfNode.new(val[0], close_scope!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 111)
  def _reduce_43(val, _values, result)
            false_children, true_children = close_scope!, close_scope!
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 116)
  def _reduce_44(val, _values, result)
            false_children, true_children = close_scope!, close_scope!
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 121)
  def _reduce_45(val, _values, result)
            false_children, true_children = close_scope!, close_scope!
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 127)
  def _reduce_46(val, _values, result)
     @stack.pop; result = IfNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 128)
  def _reduce_47(val, _values, result)
     result = IfNode.new(val[0], close_scope!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 131)
  def _reduce_48(val, _values, result)
            false_children, true_children = close_scope!, close_scope!
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 136)
  def _reduce_49(val, _values, result)
            false_children, true_children = close_scope!, close_scope!
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 141)
  def _reduce_50(val, _values, result)
            false_children, true_children = close_scope!, close_scope!
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 147)
  def _reduce_51(val, _values, result)
     result = [val[2].value, val[4]] 
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'cadenza.y', 158)
  def _reduce_53(val, _values, result)
            iterator = VariableNode.new(val[0][0])
        iterable = val[0][1]
        
        result = ForNode.new(iterator, iterable, [])      
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 163)
  def _reduce_54(val, _values, result)
     open_scope! 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 165)
  def _reduce_55(val, _values, result)
            iterator = VariableNode.new(val[0][0])
        iterable = val[0][1]
        
        result = ForNode.new(iterator, iterable, close_scope!)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 173)
  def _reduce_56(val, _values, result)
     result = open_block_scope!(val[2].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 177)
  def _reduce_57(val, _values, result)
     result = close_block_scope! 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 182)
  def _reduce_58(val, _values, result)
     result = BlockNode.new(val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 183)
  def _reduce_59(val, _values, result)
     result = BlockNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 187)
  def _reduce_60(val, _values, result)
     open_scope! 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 189)
  def _reduce_61(val, _values, result)
     result = GenericBlockNode.new(val[1].value, close_scope!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 190)
  def _reduce_62(val, _values, result)
     open_scope! 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 192)
  def _reduce_63(val, _values, result)
     result = GenericBlockNode.new(val[1].value, close_scope!, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 196)
  def _reduce_64(val, _values, result)
     result = val[2].value 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 197)
  def _reduce_65(val, _values, result)
     result = VariableNode.new(val[2].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 201)
  def _reduce_66(val, _values, result)
     result = TextNode.new(val[0].value) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'cadenza.y', 211)
  def _reduce_73(val, _values, result)
     push val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 212)
  def _reduce_74(val, _values, result)
     push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 213)
  def _reduce_75(val, _values, result)
     document.extends = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 214)
  def _reduce_76(val, _values, result)
     document.extends = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RaccParser
  end   # module Cadenza
