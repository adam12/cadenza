



module Cadenza
   module RagelLexer
      
class << self
	attr_accessor :_cadenza_trans_keys
	private :_cadenza_trans_keys, :_cadenza_trans_keys=
end
self._cadenza_trans_keys = [
	0, 0, 37, 123, 9, 125, 
	9, 125, 61, 61, 9, 
	125, 34, 34, 9, 125, 
	125, 125, 39, 39, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 125, 48, 57, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 61, 61, 
	9, 125, 9, 125, 9, 125, 
	9, 125, 9, 125, 125, 
	125, 9, 125, 123, 123, 
	123, 123, 123, 123, 123, 123, 
	0
]

class << self
	attr_accessor :_cadenza_key_spans
	private :_cadenza_key_spans, :_cadenza_key_spans=
end
self._cadenza_key_spans = [
	0, 87, 117, 117, 1, 117, 1, 117, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 10, 117, 117, 117, 117, 1, 
	117, 117, 117, 117, 117, 1, 117, 1, 
	1, 1, 1
]

class << self
	attr_accessor :_cadenza_index_offsets
	private :_cadenza_index_offsets, :_cadenza_index_offsets=
end
self._cadenza_index_offsets = [
	0, 0, 88, 206, 324, 326, 444, 446, 
	564, 566, 568, 686, 804, 922, 1040, 1158, 
	1276, 1394, 1512, 1523, 1641, 1759, 1877, 1995, 
	1997, 2115, 2233, 2351, 2469, 2587, 2589, 2707, 
	2709, 2711, 2713
]

class << self
	attr_accessor :_cadenza_indicies
	private :_cadenza_indicies, :_cadenza_indicies=
end
self._cadenza_indicies = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	3, 3, 3, 3, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	4, 5, 1, 1, 6, 1, 7, 8, 
	9, 10, 11, 12, 13, 1, 14, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 16, 1, 17, 18, 19, 1, 1, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 1, 1, 1, 1, 20, 1, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 1, 21, 22, 1, 23, 23, 
	23, 23, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 25, 
	1, 1, 26, 1, 27, 28, 29, 30, 
	31, 32, 33, 1, 34, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	1, 37, 38, 39, 1, 1, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 1, 1, 1, 40, 1, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 42, 1, 43, 1, 44, 44, 
	44, 44, 44, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 44, 45, 46, 
	1, 1, 47, 1, 48, 49, 50, 51, 
	52, 53, 54, 1, 55, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 57, 
	1, 58, 59, 60, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 63, 1, 65, 64, 66, 66, 
	66, 66, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 66, 67, 68, 
	1, 1, 69, 1, 70, 71, 72, 73, 
	74, 75, 76, 1, 77, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 79, 
	1, 80, 81, 82, 1, 1, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	1, 1, 1, 1, 83, 1, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	1, 84, 85, 1, 86, 1, 65, 87, 
	88, 88, 88, 88, 88, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 88, 
	89, 90, 1, 1, 91, 1, 92, 93, 
	94, 95, 96, 97, 98, 1, 99, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 101, 1, 102, 103, 104, 1, 1, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 1, 1, 1, 1, 105, 1, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 1, 106, 107, 1, 108, 108, 
	108, 108, 108, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 109, 110, 
	1, 1, 111, 1, 112, 113, 114, 115, 
	116, 117, 118, 1, 119, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 121, 
	1, 122, 123, 124, 1, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 125, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 126, 127, 1, 128, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 128, 129, 130, 1, 1, 
	131, 1, 132, 133, 134, 135, 136, 137, 
	138, 1, 139, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 141, 1, 142, 
	143, 144, 1, 1, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 1, 1, 
	1, 1, 145, 1, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 1, 146, 
	147, 1, 148, 148, 148, 148, 148, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 149, 150, 1, 1, 151, 1, 
	152, 153, 154, 155, 156, 157, 158, 1, 
	159, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 162, 163, 164, 
	1, 1, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 1, 1, 1, 1, 
	165, 1, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 1, 166, 167, 1, 
	168, 168, 168, 168, 168, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 168, 
	169, 170, 1, 1, 171, 1, 172, 173, 
	174, 175, 176, 177, 178, 1, 179, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 181, 1, 182, 183, 184, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 185, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 186, 187, 1, 188, 188, 
	188, 188, 188, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 189, 190, 
	1, 1, 191, 1, 192, 193, 194, 195, 
	196, 197, 198, 1, 199, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 200, 
	1, 201, 202, 203, 1, 1, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	1, 1, 1, 1, 204, 1, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	1, 205, 206, 1, 207, 207, 207, 207, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 207, 208, 209, 1, 1, 
	210, 1, 211, 212, 213, 214, 215, 216, 
	217, 1, 218, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 220, 1, 221, 
	222, 223, 1, 1, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 1, 1, 
	1, 1, 224, 1, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 1, 225, 
	226, 1, 227, 227, 227, 227, 227, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 227, 228, 229, 1, 1, 230, 1, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 240, 1, 241, 242, 243, 
	1, 1, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 1, 1, 1, 1, 
	244, 1, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 1, 245, 246, 1, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 1, 227, 227, 227, 227, 227, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 228, 229, 1, 1, 230, 
	1, 231, 232, 233, 234, 235, 236, 237, 
	1, 239, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 240, 1, 241, 242, 
	243, 1, 1, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 1, 1, 1, 
	1, 244, 1, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 1, 245, 246, 
	1, 248, 248, 248, 248, 248, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	248, 249, 250, 1, 1, 251, 1, 252, 
	253, 254, 255, 256, 257, 258, 1, 259, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 261, 1, 262, 263, 264, 1, 
	1, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 1, 1, 1, 1, 265, 
	1, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 1, 266, 267, 1, 268, 
	268, 268, 268, 268, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 268, 269, 
	270, 1, 1, 271, 1, 272, 273, 274, 
	275, 276, 277, 278, 1, 279, 280, 280, 
	280, 280, 280, 280, 280, 280, 280, 280, 
	281, 1, 282, 283, 284, 1, 1, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 1, 1, 1, 1, 285, 1, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 1, 286, 287, 1, 288, 288, 288, 
	288, 288, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 288, 289, 290, 1, 
	1, 291, 1, 292, 293, 294, 295, 296, 
	297, 298, 1, 299, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 301, 1, 
	302, 303, 304, 1, 1, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 1, 
	1, 1, 1, 305, 1, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 1, 
	306, 307, 1, 308, 1, 309, 309, 309, 
	309, 309, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 309, 310, 311, 1, 
	1, 312, 1, 313, 314, 315, 316, 317, 
	318, 319, 1, 320, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 322, 1, 
	323, 324, 325, 1, 1, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 1, 
	1, 1, 1, 326, 1, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 1, 
	327, 328, 1, 329, 329, 329, 329, 329, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 329, 330, 331, 1, 1, 332, 
	1, 333, 334, 335, 336, 337, 338, 339, 
	1, 340, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 342, 1, 343, 344, 
	345, 1, 1, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 1, 1, 1, 
	1, 346, 1, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 1, 347, 348, 
	1, 349, 349, 349, 349, 349, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	349, 350, 351, 1, 1, 352, 1, 353, 
	354, 355, 356, 357, 358, 359, 1, 360, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 362, 1, 363, 364, 365, 1, 
	1, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 1, 1, 1, 1, 366, 
	1, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 1, 367, 368, 1, 369, 
	369, 369, 369, 369, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 369, 370, 
	371, 1, 1, 372, 1, 373, 374, 375, 
	376, 377, 378, 379, 380, 381, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	382, 1, 383, 384, 385, 1, 1, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 1, 1, 1, 1, 380, 1, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 1, 386, 387, 1, 388, 388, 388, 
	388, 388, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 388, 389, 390, 1, 
	1, 391, 1, 392, 393, 394, 395, 396, 
	397, 398, 1, 399, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 401, 1, 
	402, 403, 404, 1, 1, 405, 405, 405, 
	405, 405, 405, 405, 405, 405, 405, 405, 
	405, 405, 405, 405, 405, 405, 405, 405, 
	405, 405, 405, 405, 405, 405, 405, 1, 
	1, 1, 1, 405, 1, 405, 405, 405, 
	405, 405, 405, 405, 405, 405, 405, 405, 
	405, 405, 405, 405, 405, 405, 405, 405, 
	405, 405, 405, 405, 405, 405, 405, 1, 
	406, 407, 1, 408, 1, 409, 409, 409, 
	409, 409, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 409, 410, 411, 1, 
	1, 412, 1, 413, 414, 415, 416, 417, 
	418, 419, 1, 420, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 422, 1, 
	423, 424, 425, 1, 1, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 1, 
	1, 1, 1, 426, 1, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 1, 
	427, 428, 1, 430, 429, 432, 431, 434, 
	433, 436, 435, 0
]

class << self
	attr_accessor :_cadenza_trans_targs
	private :_cadenza_trans_targs, :_cadenza_trans_targs=
end
self._cadenza_trans_targs = [
	2, 0, 30, 3, 4, 6, 8, 9, 
	10, 11, 12, 13, 14, 15, 16, 17, 
	20, 21, 23, 25, 27, 28, 29, 3, 
	4, 6, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 17, 20, 21, 23, 25, 
	27, 28, 29, 5, 3, 4, 6, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 20, 21, 23, 25, 27, 28, 29, 
	6, 7, 3, 4, 6, 8, 9, 10, 
	11, 12, 13, 14, 15, 16, 17, 20, 
	21, 23, 25, 27, 28, 29, 33, 9, 
	3, 4, 6, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 20, 21, 23, 
	25, 27, 28, 29, 3, 4, 6, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 20, 21, 23, 25, 27, 28, 29, 
	3, 4, 6, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 20, 21, 23, 
	25, 27, 28, 29, 3, 4, 6, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 20, 21, 23, 25, 27, 28, 29, 
	3, 4, 6, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 20, 21, 23, 
	25, 27, 28, 29, 3, 4, 6, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	20, 21, 23, 25, 27, 28, 29, 3, 
	4, 6, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 17, 20, 21, 23, 25, 
	27, 28, 29, 3, 4, 6, 8, 9, 
	10, 11, 12, 13, 14, 15, 18, 16, 
	20, 21, 23, 25, 27, 28, 29, 19, 
	3, 4, 6, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 20, 21, 23, 
	25, 27, 28, 29, 3, 4, 6, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 20, 21, 22, 25, 27, 28, 29, 
	3, 4, 6, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 20, 21, 23, 
	25, 27, 28, 29, 24, 3, 4, 6, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 20, 21, 23, 25, 27, 28, 
	29, 3, 4, 6, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 20, 21, 
	26, 25, 27, 28, 29, 3, 4, 6, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 20, 21, 23, 25, 27, 28, 
	29, 3, 4, 6, 8, 9, 10, 11, 
	12, 13, 14, 15, 27, 16, 20, 21, 
	23, 25, 28, 29, 3, 4, 6, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 20, 21, 23, 25, 27, 28, 29, 
	34, 3, 4, 6, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 20, 21, 
	23, 25, 27, 28, 29, 32, 1, 32, 
	1, 32, 1, 32, 1
]

class << self
	attr_accessor :_cadenza_trans_actions
	private :_cadenza_trans_actions, :_cadenza_trans_actions=
end
self._cadenza_trans_actions = [
	0, 0, 0, 1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 4, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	0, 0, 6, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 0, 0, 
	8, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 10, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 14, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	0, 15, 15, 15, 15, 15, 15, 15, 
	16, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 0, 23, 
	23, 23, 23, 23, 23, 23, 23, 0, 
	24, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 26, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 0, 27, 27, 27, 27, 
	28, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 0, 30, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 32, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	0, 33, 33, 33, 33, 34, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 36, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 0, 37, 37, 37, 
	37, 37, 37, 37, 38, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	0, 40, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 3, 3, 0, 
	43, 45, 45, 47, 47
]

class << self
	attr_accessor :_cadenza_eof_actions
	private :_cadenza_eof_actions, :_cadenza_eof_actions=
end
self._cadenza_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	42, 44, 46
]

class << self
	attr_accessor :cadenza_start
end
self.cadenza_start = 31;
class << self
	attr_accessor :cadenza_first_final
end
self.cadenza_first_final = 31;
class << self
	attr_accessor :cadenza_error
end
self.cadenza_error = 0;

class << self
	attr_accessor :cadenza_en_main
end
self.cadenza_en_main = 31;



      def self.tokenize(source)
         # unpack the source string into a character array if it's a string
         data = source.unpack("c*") if source.is_a?(String)
         
         # set an array index to the start of the current token
         ts = 0
         eof = data.length

         # set up an array which will hold all found tokens
         tokens = []

         # Ragel will insert any code it needs for it's variables
         
begin
	p ||= 0
	pe ||= data.length
	cs = cadenza_start
end


         text = lambda { data[ts..p-1].pack('c*') }
         
         advance_token = lambda do
            token = text.call
            ts = p
            token
         end

         append = lambda do |type, value, text|
            tokens << [type, Cadenza::Token.new(value, text, 0, 0)]
         end

         push = lambda do |type|
            value = advance_token.call
            append.call(type, value, value)
         end

         # evaluate the state machine
         
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _cadenza_index_offsets[cs]
	_slen = _cadenza_key_spans[cs]
	_trans = if (   _slen > 0 && 
			_cadenza_trans_keys[_keys] <= data[p].ord && 
			data[p].ord <= _cadenza_trans_keys[_keys + 1] 
		    ) then
			_cadenza_indicies[ _inds + data[p].ord - _cadenza_trans_keys[_keys] ] 
		 else 
			_cadenza_indicies[ _inds + _slen ]
		 end
	cs = _cadenza_trans_targs[_trans]
	if _cadenza_trans_actions[_trans] != 0
	case _cadenza_trans_actions[_trans]
	when 3 then
		begin

      ts = p
   		end
	when 22 then
		begin

      token = advance_token.call
      if token.index "."
         append.call :REAL, token.to_f, token
      else
         append.call :INTEGER, token.to_i, token
      end
   		end
	when 36 then
		begin

      token = advance_token.call

      case token
         when *%w(if unless else endif endunless for in endfor block endblock extends end and or not)
            append.call token.upcase.to_sym, token, token

         else
            append.call :IDENTIFIER, token, token
      end
   		end
	when 6 then
		begin

      token = advance_token.call
      value = token[1..-2]
      append.call :STRING, value, token
   		end
	when 30 then
		begin
 push.call(:OP_EQ)  		end
	when 4 then
		begin
 push.call(:OP_NEQ) 		end
	when 34 then
		begin
 push.call(:OP_GEQ) 		end
	when 28 then
		begin
 push.call(:OP_LEQ) 		end
	when 32 then
		begin
 push.call('>') 		end
	when 26 then
		begin
 push.call('<') 		end
	when 14 then
		begin
 push.call('+') 		end
	when 18 then
		begin
 push.call('-') 		end
	when 12 then
		begin
 push.call('*') 		end
	when 20 then
		begin
 push.call('/') 		end
	when 40 then
		begin
 push.call(:VAR_OPEN) 		end
	when 1 then
		begin
 push.call(:STMT_OPEN) 		end
	when 16 then
		begin
 push.call(',') 		end
	when 8 then
		begin
 push.call('(') 		end
	when 10 then
		begin
 push.call(')') 		end
	when 24 then
		begin
 push.call(':') 		end
	when 38 then
		begin
 push.call('|') 		end
	when 23 then
		begin

      token = advance_token.call
      if token.index "."
         append.call :REAL, token.to_f, token
      else
         append.call :INTEGER, token.to_i, token
      end
   		end
		begin

      ts = p
   		end
	when 37 then
		begin

      token = advance_token.call

      case token
         when *%w(if unless else endif endunless for in endfor block endblock extends end and or not)
            append.call token.upcase.to_sym, token, token

         else
            append.call :IDENTIFIER, token, token
      end
   		end
		begin

      ts = p
   		end
	when 7 then
		begin

      token = advance_token.call
      value = token[1..-2]
      append.call :STRING, value, token
   		end
		begin

      ts = p
   		end
	when 31 then
		begin
 push.call(:OP_EQ)  		end
		begin

      ts = p
   		end
	when 5 then
		begin
 push.call(:OP_NEQ) 		end
		begin

      ts = p
   		end
	when 35 then
		begin
 push.call(:OP_GEQ) 		end
		begin

      ts = p
   		end
	when 29 then
		begin
 push.call(:OP_LEQ) 		end
		begin

      ts = p
   		end
	when 33 then
		begin
 push.call('>') 		end
		begin

      ts = p
   		end
	when 27 then
		begin
 push.call('<') 		end
		begin

      ts = p
   		end
	when 15 then
		begin
 push.call('+') 		end
		begin

      ts = p
   		end
	when 19 then
		begin
 push.call('-') 		end
		begin

      ts = p
   		end
	when 13 then
		begin
 push.call('*') 		end
		begin

      ts = p
   		end
	when 21 then
		begin
 push.call('/') 		end
		begin

      ts = p
   		end
	when 41 then
		begin
 push.call(:VAR_OPEN) 		end
		begin

      ts = p
   		end
	when 47 then
		begin
 push.call(:VAR_CLOSE) 		end
		begin

      ts = p
   		end
	when 2 then
		begin
 push.call(:STMT_OPEN) 		end
		begin

      ts = p
   		end
	when 45 then
		begin
 push.call(:STMT_CLOSE) 		end
		begin

      ts = p
   		end
	when 17 then
		begin
 push.call(',') 		end
		begin

      ts = p
   		end
	when 9 then
		begin
 push.call('(') 		end
		begin

      ts = p
   		end
	when 11 then
		begin
 push.call(')') 		end
		begin

      ts = p
   		end
	when 25 then
		begin
 push.call(':') 		end
		begin

      ts = p
   		end
	when 39 then
		begin
 push.call('|') 		end
		begin

      ts = p
   		end
	when 43 then
		begin
 push.call(:TEXT_BLOCK) 		end
		begin

      ts = p
   		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _cadenza_eof_actions[cs]
	when 46 then
		begin
 push.call(:VAR_CLOSE) 		end
	when 44 then
		begin
 push.call(:STMT_CLOSE) 		end
	when 42 then
		begin
 push.call(:TEXT_BLOCK) 		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


         # and return the result
         tokens
      end
   end
end